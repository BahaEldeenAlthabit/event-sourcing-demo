// <auto-generated />
using System;
using Anis.Purchases.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Anis.Purchases.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Anis.Purchases.Data.Entities.OutboxMessage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("Anis.Purchases.Data.Entities.UniqueReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "Reference")
                        .IsUnique();

                    b.ToTable("UniqueReferences");
                });

            modelBuilder.Entity("Anis.Purchases.Events.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("_data")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId", "Sequence")
                        .IsUnique();

                    b.ToTable("EventStore");

                    b.HasDiscriminator<string>("Type");
                });

            modelBuilder.Entity("Anis.Purchases.Events.DamagedQuantityAdjustedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("DamagedQuantityAdjusted");
                });

            modelBuilder.Entity("Anis.Purchases.Events.DeadlineChangedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("DeadlineChanged");
                });

            modelBuilder.Entity("Anis.Purchases.Events.DeliveredEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("Delivered");
                });

            modelBuilder.Entity("Anis.Purchases.Events.DeliveryCancelledEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("DeliveryCancelled");
                });

            modelBuilder.Entity("Anis.Purchases.Events.InvoiceClosedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("InvoiceClosed");
                });

            modelBuilder.Entity("Anis.Purchases.Events.InvoiceCreatedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("InvoiceCreated");
                });

            modelBuilder.Entity("Anis.Purchases.Events.InvoiceDeletedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("InvoiceDeleted");
                });

            modelBuilder.Entity("Anis.Purchases.Events.InvoiceInfoUpdatedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("InvoiceInfoUpdated");
                });

            modelBuilder.Entity("Anis.Purchases.Events.ItemAddedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("ItemAdded");
                });

            modelBuilder.Entity("Anis.Purchases.Events.ItemRemovedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("ItemRemoved");
                });

            modelBuilder.Entity("Anis.Purchases.Events.ItemUpdatedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("ItemUpdated");
                });

            modelBuilder.Entity("Anis.Purchases.Events.ShipmentAddedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("ShipmentAdded");
                });

            modelBuilder.Entity("Anis.Purchases.Events.ShipmentRemovedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("ShipmentRemoved");
                });

            modelBuilder.Entity("Anis.Purchases.Events.ShipmentUpdatedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("ShipmentUpdated");
                });

            modelBuilder.Entity("Anis.Purchases.Events.ShippingConfirmedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("ShippingConfirmed");
                });

            modelBuilder.Entity("Anis.Purchases.Events.ShippingUnconfirmedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("ShippingUnconfirmed");
                });

            modelBuilder.Entity("Anis.Purchases.Events.SupplierAssignedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("SupplierAssigned");
                });

            modelBuilder.Entity("Anis.Purchases.Events.SupplierChangedEvent", b =>
                {
                    b.HasBaseType("Anis.Purchases.Events.Event");

                    b.HasDiscriminator().HasValue("SupplierChanged");
                });

            modelBuilder.Entity("Anis.Purchases.Data.Entities.OutboxMessage", b =>
                {
                    b.HasOne("Anis.Purchases.Events.Event", "Event")
                        .WithOne()
                        .HasForeignKey("Anis.Purchases.Data.Entities.OutboxMessage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });
#pragma warning restore 612, 618
        }
    }
}
